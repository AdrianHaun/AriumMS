classdef FeatData
    %Class object for storing and processing of feature data generated by
    % AriumMS RawData objects. Input: merged output struct containung all
    % feature data (intensities, retention times, numeric identifier
    % (column 1 mass, column 2 RT), Peak Borders. Calculates and stores
    % Average Intensity, number of occurences, p-Values, Fold Changes
    % and Standard Deviation, and applies data transformations and scaling.

    properties
        GroupName                   (1,:) string
        AbstractGroupName           (1,:) string
        FullUnscaledIntensityArray  (:,:) double
        CleanFullIntensityArray     (:,:) double
        IntensityArrayWithUniques   (:,:) double
        IntensityArrayNoUniques     (:,:) double
        IdentifierArray             (:,:) double
        IdentifierArrayNoUniques    (:,:) double
        XIC                         (:,:) cell 
        NameStringArray             (:,:) string
        NameStringArrayNoUniques    (:,:) string
        RetentionTimeArray          (:,:) double
        PeakBorderArray             (:,:) cell
        EntropyArray                (:,:) double
        Signal2NoiseArray           (:,:) double
        NumberOfFilesArray          (1,:) double
        OccurenceCount              (:,:) double
        SignificantFeature          (1,:) cell
        UniqueFeature               (:,:) logical
        AverageIntensities          (:,:) double
        AverageIntensitiesNoUniques (:,:) double
        StandardDeviations          (:,:) double
        StandardDeviationsNoUniques (:,:) double
        FoldChanges                 (1,:) cell
        FullFoldChanges             (1,:) cell
        VSNaming                    (1,:) cell
        FoundInReferenceGroup       (1,:) cell  
        OriginalGroup               (:,:) string
        InGroup                     (:,:) string
        CombinedSampleNames         (1,:) cell 
    end

    methods
        function obj = FeatData(FullOutput)
            %UNTITLED Construct an instance of this class
            %   Detailed explanation goes here
            obj.GroupName = FullOutput.GroupName(1,:);
            if size(FullOutput.GroupName,1)<1
                obj.AbstractGroupName =  "Augmented Group " + FullOutput.GroupName(2,:);
            end
            obj.IdentifierArray = FullOutput.FeatIdentifiers;
            obj.NameStringArray = obj.IdentifierArray(:,1) + "@" + obj.IdentifierArray(:,2) + "s";
            obj.FullUnscaledIntensityArray = FullOutput.IntensityStorage;
            obj.RetentionTimeArray = FullOutput.RetentionTimeStorage;
            obj.PeakBorderArray = FullOutput.PeakBorderStorage;
            obj.NumberOfFilesArray = FullOutput.SampleNumbers;
            obj.EntropyArray = FullOutput.EntropyStorage;
            obj.Signal2NoiseArray = FullOutput.Signal2NoiseStorage;
            obj.XIC = FullOutput.XIC;
            if iscell(FullOutput.SampleNames)
                obj.CombinedSampleNames = FullOutput.SampleNames;
            else
                obj.CombinedSampleNames{1}=FullOutput.SampleNames;
            end
            if isfield(FullOutput,"OriginalGroup")
                obj.OriginalGroup = FullOutput.OriginalGroup;
                % Initialize mergedString array
            mergedString = cell(size(FullOutput.OriginalGroup, 1), 1);
            % Iterate through each row
            for i = 1:size(FullOutput.OriginalGroup, 1)
                % Concatenate non-empty strings with the appropriate delimiter
                mergedString{i} = strjoin(FullOutput.OriginalGroup(i, ~cellfun('isempty', FullOutput.OriginalGroup(i, :))), ', ');
            end
            obj.InGroup = string(mergedString);
            else
                obj.OriginalGroup = repmat(obj.GroupName,size(obj.NameStringArray,1),1);
                obj.InGroup = obj.OriginalGroup;
            end
            % get number of Occurences per Grpup
            Subgroups = obj.FullUnscaledIntensityArray;
            Subgroups(Subgroups==0)=NaN;
            Subgroups(~isnan(Subgroups)) = 1;
            Subgroups = mat2cell(Subgroups,size(Subgroups,1),obj.NumberOfFilesArray);
            NumCounts = cellfun(@(x) sum(x,2,'omitnan'), Subgroups, 'UniformOutput', false);
            obj.OccurenceCount = horzcat(NumCounts{:});
            % check for Feature Uniqueness
            for n=1:size(obj.OccurenceCount,2)
                currentgroup = obj.OccurenceCount(:,n);
                othergroups = obj.OccurenceCount;
                othergroups(:,n) = [];
                obj.UniqueFeature(:,n) = currentgroup > 0 & sum(othergroups,2) == 0;
            end

%remove Features with no counterpart in other group
            idx=any(obj.UniqueFeature,2);
            obj.IntensityArrayNoUniques = obj.FullUnscaledIntensityArray(~idx,:);
            obj.IdentifierArrayNoUniques = obj.IdentifierArray(~idx,:);
            obj.NameStringArrayNoUniques = obj.NameStringArray(~idx,:);

            %calculate Average Intensity and standard Deviation for all
            %Features
            Subgroups = obj.FullUnscaledIntensityArray;
            Subgroups(Subgroups==0)=NaN;
            Subgroups = mat2cell(Subgroups,size(Subgroups,1),obj.NumberOfFilesArray);
            %replace missing by average value of that feature
            parfor q=1:size(Subgroups,2)
                mat=Subgroups{q};
                for row = 1:size(mat,1)
                    missingIndices = isnan(mat(row, :));
                    rowMean = mean(mat(row, ~missingIndices));
                    mat(row, missingIndices) = rowMean;
                end
                Subgroups{q}=mat;
            end
            AverageIntensityCell=cellfun(@(x) mean(x,2,'omitnan'),Subgroups,'UniformOutput',false);
            obj.AverageIntensities = horzcat(AverageIntensityCell{:});
            StandardDeviationCell=horzcat(cellfun(@(x) std(x,[],2,'omitnan'),Subgroups,'UniformOutput',false));
            obj.StandardDeviations = horzcat(StandardDeviationCell{:});
            obj.CleanFullIntensityArray = horzcat(Subgroups{:});
        end


        function obj = CalculateFoldChanges(obj)
            ISUnique = any(obj.UniqueFeature,2);
            for g=1:size(obj.GroupName,2)
                Averages = obj.AverageIntensities;
                AllNames = obj.GroupName;
                idx = contains(AllNames,"+");
                AllNames(idx) = obj.AbstractGroupName(idx);
                ActiveGroup = Averages(:,g);
                ActiveName = AllNames(g);
                AllNames(g) = [];
                Averages(:,g)=[];
                %preallocation
                FoldArray = zeros(size(Averages));
                VSNamingArray = strings(size(AllNames));
                %calculate foldchanges against each group
                for n=1:size(Averages,2)
                    BaseLineGroup = Averages(:,n);
                    BaseLineName = AllNames(n);
                    fold = ActiveGroup./BaseLineGroup;
                    fold(isinf(fold))=0;
                    fold(isnan(fold))=0; %replace possible NaN and Inf with 0;
                    FoldArray(:,n) = fold;
                    VSNamingArray(n) = ActiveName + " vs. " + BaseLineName;
                end
                obj.FullFoldChanges{g} = FoldArray;
                FoldArray(ISUnique,:) = [];
                obj.FoldChanges{g} = FoldArray;
                obj.VSNaming{g} = VSNamingArray;
                
            end
        end
        function obj = CalculateSignificance(obj,HochbergFilter,FDRValue)
            %calculate feature significance only for non unique features
            AllIntensities = mat2cell(obj.IntensityArrayWithUniques,size(obj.IntensityArrayWithUniques,1),obj.NumberOfFilesArray);
            for g=1:size(obj.GroupName,2)
                ActiveGroup = AllIntensities{g};
                OtherGroups = AllIntensities(1:end ~= g);
                SignificantFeatureArray = zeros(size(ActiveGroup,1),size(OtherGroups,2));
                for n=1:size(OtherGroups,2)
                    [~,p]=ttest2(ActiveGroup,OtherGroups{n},"Dim",2);
                    p(isnan(p))=1;
                    if HochbergFilter==true
                        [pnew,sortParam]=sort(p,'ascend');
                        sortParam(isnan(pnew))=[];
                        pnew(isnan(pnew))=[];
                        rank=1:1:length(pnew);
                        ptest=rank./length(rank)*FDRValue;
                        idx=pnew<ptest';
                        sortParam(~idx)=[];
                        pnew=nan(1,length(p));
                        pnew(sortParam)=p(sortParam);
                        p=pnew;
                    end
                    SignificantFeatureArray(:,n) = p;
                end
                obj.SignificantFeature{g}=SignificantFeatureArray;
            end
        end
        
        function obj = applyFeatureScaling(obj,TransformType,ScaleType)
            FeatIntensity = obj.CleanFullIntensityArray;
            FeatIntensity(FeatIntensity==0)=NaN;
            %% Transform
            switch TransformType
                case 'logn'
                    FeatIntensity = log(FeatIntensity);
                case 'log10'
                    FeatIntensity = log10(FeatIntensity);
                case 'power'
                    FeatIntensity = sqrt(FeatIntensity);
                case 'cube'
                    FeatIntensity = FeatIntensity.^(1/3);
                case 'reciprocal'
                    FeatIntensity = FeatIntensity.^-1;
            end
            %% scale each feature along 2nd dimension (sample repetition)
            %scaled individually excluding NaN
            FeatIntensity(FeatIntensity==0)=NaN;
            FeatIntensity(FeatIntensity==Inf)=NaN;
            FeatIntensity(FeatIntensity==-Inf)=NaN;
            switch ScaleType
                case 'Centering' %only mean centering
                    FeatIntensity=FeatIntensity-mean(FeatIntensity,2,'omitnan');
                case 'Auto' %z score
                    FeatIntensity=(FeatIntensity-mean(FeatIntensity,2,'omitnan'))./std(FeatIntensity,0,2,'omitnan');
                case 'Pareto' %Pareto scaling
                    FeatIntensity = (FeatIntensity-mean(FeatIntensity,2,'omitnan'))./sqrt(std(FeatIntensity,0,2,'omitnan'));
                case 'Vast' %Vast scaling
                    FeatIntensity = ((FeatIntensity-mean(FeatIntensity,2,'omitnan'))./std(FeatIntensity,0,2,'omitnan')).*(mean(FeatIntensity,2,'omitnan')./std(FeatIntensity,0,2,'omitnan'));
                case 'Range' %range [min max] scaling
                    FeatIntensity = (FeatIntensity-mean(FeatIntensity,2,'omitnan'))./(max(FeatIntensity,[],2,'omitnan')-min(FeatIntensity,[],2,'omitnan'));
                case 'Level' %Level Scaling
                    FeatIntensity = (FeatIntensity-mean(FeatIntensity,2,'omitnan'))./mean(FeatIntensity,2,'omitnan');
            end
            FeatIntensity(FeatIntensity==Inf)=0;
            FeatIntensity(FeatIntensity==-Inf)=0;
            FeatIntensity(isnan(FeatIntensity))=0;
            obj.IntensityArrayWithUniques = FeatIntensity;
            idx=any(obj.UniqueFeature,2);
            obj.IntensityArrayNoUniques = FeatIntensity(~idx,:);

            %update Average Intensity, standard Deviation with Uniques
            Subgroups = obj.IntensityArrayWithUniques;
            Subgroups(Subgroups==0)=NaN;
            Subgroups = mat2cell(Subgroups,size(Subgroups,1),obj.NumberOfFilesArray);
            AverageIntensityCell=cellfun(@(x) mean(x,2,'omitnan'),Subgroups,'UniformOutput',false);
            obj.AverageIntensities = horzcat(AverageIntensityCell{:});
            StandardDeviationCell = horzcat(cellfun(@(x) std(x,[],2,'omitnan'),Subgroups,'UniformOutput',false));
            obj.StandardDeviations = horzcat(StandardDeviationCell{:});
            

            %update Average Intensity, standard Deviation and Fold Changes
            %without Uniques
            Subgroups = obj.IntensityArrayNoUniques;
            Subgroups(Subgroups==0)=NaN;
            Subgroups = mat2cell(Subgroups,size(Subgroups,1),obj.NumberOfFilesArray);
            AverageIntensityCell=cellfun(@(x) mean(x,2,'omitnan'),Subgroups,'UniformOutput',false);
            obj.AverageIntensitiesNoUniques = horzcat(AverageIntensityCell{:});
            StandardDeviationCell=horzcat(cellfun(@(x) std(x,[],2,'omitnan'),Subgroups,'UniformOutput',false));
            obj.StandardDeviationsNoUniques = horzcat(StandardDeviationCell{:});
            obj=obj.CalculateFoldChanges;

        end
        
        function obj = RefGroupScaling(obj,GroupAssignment)
            if all(GroupAssignment(:,2)=='none')
                text="no Reference Group selected";
                    notInRef{1,1}=repmat(text,size(obj.IdentifierArray,1),1);
                    obj.FoundInReferenceGroup=repmat(notInRef,size(obj.NumberOfFilesArray));

            else
                %calculate Averages
                Subgroups = obj.CleanFullIntensityArray;
                Subgroups(Subgroups==0)=NaN;
                Subgroups = mat2cell(Subgroups,size(Subgroups,1),obj.NumberOfFilesArray);
                AverageIntensityCell=cellfun(@(x) mean(x,2,'omitnan'),Subgroups,'UniformOutput',false);
                % get Indices for Assignment
                GroupAssignment=removecats(GroupAssignment);    %remove unused categories
                Uni=unique(GroupAssignment(:,1));
                Ref=GroupAssignment(:,2)==Uni'; % row = Sample Group, Col = Reference Group
                [SampleGroupID,ReferenceGroupID]=find(Ref);
                if any(any(Ref,2))==true
                    notInRef=cell(size(Subgroups));
                    text = strings(size(obj.IntensityArrayWithUniques,1),1);
                    for n=1:length(SampleGroupID)
                        ref=AverageIntensityCell{ReferenceGroupID(n)};
                        samp=Subgroups{SampleGroupID(n)};
                        idx=~isnan(ref);
                        idx(:,2)=all(~isnan(samp),2);
                        TextID = idx(:,1) == false & idx(:,2) == true;
                        text(TextID) = "not found in Reference Group";
                        notInRef{SampleGroupID(n)} = text;
                        idx=any(~idx,2);
                        samp(~idx,:)=samp(~idx,:)./ref(~idx);
                        Subgroups{SampleGroupID(n)}=samp;
                    end
                    obj.IntensityArrayWithUniques = horzcat(Subgroups{:});
                    obj.FoundInReferenceGroup = notInRef;
                    idx = cellfun(@(x) isempty(x), obj.FoundInReferenceGroup);
                    text = "no Reference Group";
                    text = repmat(text,size(obj.IntensityArrayWithUniques,1),1);
                    obj.FoundInReferenceGroup{idx} = text;
                else
                    text="no Reference Group";
                    notInRef{1,1}=repmat(text,size(obj.IntensityArrayWithUniques,1),1);
                    obj.FoundInReferenceGroup=repmat(notInRef,size(Subgroups));
                end
            end
        end
    end
end
